// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ip_handler_iph_check_ip_checksum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        iph_subSumsFifoOut_V_dout,
        iph_subSumsFifoOut_V_empty_n,
        iph_subSumsFifoOut_V_read,
        ipValidFifo_V_V_din,
        ipValidFifo_V_V_full_n,
        ipValidFifo_V_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm0_0 = 1'b1;
parameter    ap_ST_st2_fsm1_1 = 2'b10;
parameter    ap_ST_st3_fsm2_1 = 2'b10;
parameter    ap_ST_st0_fsm1_0 = 2'b1;
parameter    ap_ST_st0_fsm2_0 = 2'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_43 = 32'b1000011;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv16_FFFF = 16'b1111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [68:0] iph_subSumsFifoOut_V_dout;
input   iph_subSumsFifoOut_V_empty_n;
output   iph_subSumsFifoOut_V_read;
output  [0:0] ipValidFifo_V_V_din;
input   ipValidFifo_V_V_full_n;
output   ipValidFifo_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg iph_subSumsFifoOut_V_read;
reg ipValidFifo_V_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm0 = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm0_0;
reg    ap_sig_bdd_26;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm1 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm1_0;
reg    ap_sig_bdd_37;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm2 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm2_0;
reg    ap_sig_bdd_45;
wire   [0:0] tmp_nbreadreq_fu_70_p3;
reg    ap_sig_bdd_63;
reg    ap_sig_cseq_ST_st2_fsm1_1;
reg    ap_sig_bdd_69;
reg   [0:0] tmp_reg_235;
reg   [0:0] ap_reg_ppstg_tmp_reg_235_pp0_it1;
reg    ap_sig_bdd_81;
reg    ap_sig_cseq_ST_st3_fsm2_1;
reg    ap_sig_bdd_86;
wire   [0:0] ap_reg_ppstg_tmp_reg_235_pp0_it0;
wire   [15:0] tmp_117_fu_154_p2;
reg   [15:0] tmp_117_reg_239;
wire   [15:0] tmp_sum1_V_fu_176_p2;
reg   [15:0] tmp_sum1_V_reg_244;
reg   [0:0] tmp_126_reg_249;
wire   [0:0] tmp_V_fu_230_p2;
reg   [0:0] tmp_V_reg_254;
wire   [16:0] tmp_113_fu_102_p1;
wire   [16:0] tmp_sum2_V_load_new1_fu_92_p4;
wire   [16:0] tmp_sum1_V_load_new_fu_122_p4;
wire   [16:0] tmp_sum3_V_load_new_fu_112_p4;
wire   [16:0] tmp_s_fu_106_p2;
wire   [0:0] tmp_114_fu_138_p3;
wire   [15:0] tmp_116_fu_150_p1;
wire   [15:0] tmp_115_fu_146_p1;
wire   [16:0] tmp_27_fu_132_p2;
wire   [0:0] tmp_118_fu_160_p3;
wire   [15:0] tmp_120_fu_172_p1;
wire   [15:0] tmp_119_fu_168_p1;
wire   [16:0] tmp_sum1_V_cast_fu_193_p1;
wire   [16:0] p_cast_fu_190_p1;
wire   [16:0] tmp_28_fu_196_p2;
wire   [0:0] tmp_122_fu_202_p3;
wire   [15:0] tmp_124_fu_214_p1;
wire   [15:0] tmp_123_fu_210_p1;
wire   [15:0] tmp_125_fu_218_p2;
wire   [0:0] tmp_29_fu_224_p2;
reg   [0:0] ap_NS_fsm0;
reg   [1:0] ap_NS_fsm1;
reg   [1:0] ap_NS_fsm2;




/// the current state (ap_CS_fsm0) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm0
    if (ap_rst == 1'b1) begin
        ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
    end else begin
        ap_CS_fsm0 <= ap_NS_fsm0;
    end
end

/// the current state (ap_CS_fsm1) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm1
    if (ap_rst == 1'b1) begin
        ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
    end else begin
        ap_CS_fsm1 <= ap_NS_fsm1;
    end
end

/// the current state (ap_CS_fsm2) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm2
    if (ap_rst == 1'b1) begin
        ap_CS_fsm2 <= ap_ST_st0_fsm2_0;
    end else begin
        ap_CS_fsm2 <= ap_NS_fsm2;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_reg_ppstg_tmp_reg_235_pp0_it1 <= tmp_reg_235;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_70_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_117_reg_239 <= tmp_117_fu_154_p2;
        tmp_126_reg_249 <= iph_subSumsFifoOut_V_dout[ap_const_lv32_44];
        tmp_sum1_V_reg_244 <= tmp_sum1_V_fu_176_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_235_pp0_it0))) begin
        tmp_V_reg_254 <= tmp_V_fu_230_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_reg_235 <= tmp_nbreadreq_fu_70_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_cseq_ST_st0_fsm1_0 or ap_sig_cseq_ST_st0_fsm2_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm2_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm1_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm2_0 assign process. ///
always @ (ap_sig_bdd_45)
begin
    if (ap_sig_bdd_45) begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm0_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm1_1 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm2_1 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_0;
    end
end

/// ipValidFifo_V_V_write assign process. ///
always @ (ap_done_reg or ap_reg_ppstg_tmp_reg_235_pp0_it1 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if ((~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_235_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81))) begin
        ipValidFifo_V_V_write = ap_const_logic_1;
    end else begin
        ipValidFifo_V_V_write = ap_const_logic_0;
    end
end

/// iph_subSumsFifoOut_V_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or tmp_nbreadreq_fu_70_p3 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_70_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        iph_subSumsFifoOut_V_read = ap_const_logic_1;
    end else begin
        iph_subSumsFifoOut_V_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm2) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm2 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm2)
        ap_ST_st3_fsm2_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81) & ~(ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))) begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end else begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end
        end
        ap_ST_st0_fsm2_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end
        end
        default : 
        begin
            ap_NS_fsm2 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm0) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm0 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm0)
        ap_ST_st1_fsm0_0 : 
        begin
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
        end
        default : 
        begin
            ap_NS_fsm0 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm1) of the state machine. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_CS_fsm1 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm1)
        ap_ST_st2_fsm1_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~ap_sig_bdd_63)) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & (~(ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ap_sig_bdd_63)))) begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end else begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end
        end
        ap_ST_st0_fsm1_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end
        end
        default : 
        begin
            ap_NS_fsm1 = 'bx;
        end
    endcase
end

assign ap_reg_ppstg_tmp_reg_235_pp0_it0 = tmp_reg_235;

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm0)
begin
    ap_sig_bdd_26 = (ap_CS_fsm0[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_37 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_0]);
end

/// ap_sig_bdd_45 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_45 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_0]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (ap_start or ap_done_reg or iph_subSumsFifoOut_V_empty_n or tmp_nbreadreq_fu_70_p3)
begin
    ap_sig_bdd_63 = (((iph_subSumsFifoOut_V_empty_n == ap_const_logic_0) & ~(tmp_nbreadreq_fu_70_p3 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ipValidFifo_V_V_full_n or ap_reg_ppstg_tmp_reg_235_pp0_it1)
begin
    ap_sig_bdd_81 = ((ipValidFifo_V_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_235_pp0_it1));
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_1]);
end
assign ipValidFifo_V_V_din = tmp_V_reg_254;
assign p_cast_fu_190_p1 = tmp_117_reg_239;
assign tmp_113_fu_102_p1 = iph_subSumsFifoOut_V_dout[16:0];
assign tmp_114_fu_138_p3 = tmp_s_fu_106_p2[ap_const_lv32_10];
assign tmp_115_fu_146_p1 = tmp_s_fu_106_p2[15:0];
assign tmp_116_fu_150_p1 = tmp_114_fu_138_p3;
assign tmp_117_fu_154_p2 = (tmp_116_fu_150_p1 + tmp_115_fu_146_p1);
assign tmp_118_fu_160_p3 = tmp_27_fu_132_p2[ap_const_lv32_10];
assign tmp_119_fu_168_p1 = tmp_27_fu_132_p2[15:0];
assign tmp_120_fu_172_p1 = tmp_118_fu_160_p3;
assign tmp_122_fu_202_p3 = tmp_28_fu_196_p2[ap_const_lv32_10];
assign tmp_123_fu_210_p1 = tmp_28_fu_196_p2[15:0];
assign tmp_124_fu_214_p1 = tmp_122_fu_202_p3;
assign tmp_125_fu_218_p2 = (tmp_124_fu_214_p1 + tmp_123_fu_210_p1);
assign tmp_27_fu_132_p2 = (tmp_sum1_V_load_new_fu_122_p4 + tmp_sum3_V_load_new_fu_112_p4);
assign tmp_28_fu_196_p2 = (tmp_sum1_V_cast_fu_193_p1 + p_cast_fu_190_p1);
assign tmp_29_fu_224_p2 = (tmp_125_fu_218_p2 == ap_const_lv16_FFFF? 1'b1: 1'b0);
assign tmp_V_fu_230_p2 = (tmp_29_fu_224_p2 & tmp_126_reg_249);
assign tmp_nbreadreq_fu_70_p3 = iph_subSumsFifoOut_V_empty_n;
assign tmp_s_fu_106_p2 = (tmp_113_fu_102_p1 + tmp_sum2_V_load_new1_fu_92_p4);
assign tmp_sum1_V_cast_fu_193_p1 = tmp_sum1_V_reg_244;
assign tmp_sum1_V_fu_176_p2 = (tmp_120_fu_172_p1 + tmp_119_fu_168_p1);
assign tmp_sum1_V_load_new_fu_122_p4 = {{iph_subSumsFifoOut_V_dout[ap_const_lv32_21 : ap_const_lv32_11]}};
assign tmp_sum2_V_load_new1_fu_92_p4 = {{iph_subSumsFifoOut_V_dout[ap_const_lv32_32 : ap_const_lv32_22]}};
assign tmp_sum3_V_load_new_fu_112_p4 = {{iph_subSumsFifoOut_V_dout[ap_const_lv32_43 : ap_const_lv32_33]}};


endmodule //ip_handler_iph_check_ip_checksum

