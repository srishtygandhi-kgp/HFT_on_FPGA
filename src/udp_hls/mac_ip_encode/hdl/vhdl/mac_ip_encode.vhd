-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_ip_encode is
port (
    dataIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    dataIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    dataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    arpTableIn_V_TDATA : IN STD_LOGIC_VECTOR (55 downto 0);
    dataOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataOut_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    arpTableOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    regSubNetMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regDefaultGateway_V : IN STD_LOGIC_VECTOR (31 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    dataIn_TVALID : IN STD_LOGIC;
    dataIn_TREADY : OUT STD_LOGIC;
    arpTableOut_V_V_TVALID : OUT STD_LOGIC;
    arpTableOut_V_V_TREADY : IN STD_LOGIC;
    arpTableIn_V_TVALID : IN STD_LOGIC;
    arpTableIn_V_TREADY : OUT STD_LOGIC;
    dataOut_TVALID : OUT STD_LOGIC;
    dataOut_TREADY : IN STD_LOGIC );
end;


architecture behav of mac_ip_encode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mac_ip_encode,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.407750,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=1076,HLS_SYN_LUT=1521}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_ap_start : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_dataIn_TVALID : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_full_n : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_write : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_full_n : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_write : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_dataIn_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal mac_ip_encode_compute_ip_checksum_U0_dataIn_TREADY : STD_LOGIC;
    signal mac_ip_encode_compute_ip_checksum_U0_dataIn_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_ip_encode_compute_ip_checksum_U0_dataIn_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal mac_ip_encode_ip_checksum_insert_U0_ap_start : STD_LOGIC := '0';
    signal mac_ip_encode_ip_checksum_insert_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_empty_n : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_read : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_empty_n : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_read : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_full_n : STD_LOGIC;
    signal mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_write : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_ap_start : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_empty_n : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_read : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_full_n : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_write : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TREADY : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TVALID : STD_LOGIC;
    signal mac_ip_encode_extract_ip_address_U0_regSubNetMask_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mac_ip_encode_extract_ip_address_U0_regDefaultGateway_V : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_ap_start : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_ap_done : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_ap_continue : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_ap_idle : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_ap_ready : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_empty_n : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_read : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TVALID : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_dataOut_TREADY : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TDATA : STD_LOGIC_VECTOR (55 downto 0);
    signal mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TREADY : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_dataOut_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal mac_ip_encode_handle_arp_reply_U0_dataOut_TVALID : STD_LOGIC;
    signal mac_ip_encode_handle_arp_reply_U0_dataOut_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_ip_encode_handle_arp_reply_U0_dataOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal mac_ip_encode_handle_arp_reply_U0_myMacAddress_V : STD_LOGIC_VECTOR (47 downto 0);
    signal checksumFifo_V_V_U_ap_dummy_ce : STD_LOGIC;
    signal checksumFifo_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumFifo_V_V_full_n : STD_LOGIC;
    signal checksumFifo_V_V_write : STD_LOGIC;
    signal checksumFifo_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumFifo_V_V_empty_n : STD_LOGIC;
    signal checksumFifo_V_V_read : STD_LOGIC;
    signal dataStreamBuffer0_V_U_ap_dummy_ce : STD_LOGIC;
    signal dataStreamBuffer0_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer0_V_full_n : STD_LOGIC;
    signal dataStreamBuffer0_V_write : STD_LOGIC;
    signal dataStreamBuffer0_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer0_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer0_V_read : STD_LOGIC;
    signal dataStreamBuffer1_V_U_ap_dummy_ce : STD_LOGIC;
    signal dataStreamBuffer1_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer1_V_full_n : STD_LOGIC;
    signal dataStreamBuffer1_V_write : STD_LOGIC;
    signal dataStreamBuffer1_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer1_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer1_V_read : STD_LOGIC;
    signal dataStreamBuffer2_V_U_ap_dummy_ce : STD_LOGIC;
    signal dataStreamBuffer2_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer2_V_full_n : STD_LOGIC;
    signal dataStreamBuffer2_V_write : STD_LOGIC;
    signal dataStreamBuffer2_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer2_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer2_V_read : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_reg_procdone_mac_ip_encode_extract_ip_address_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;

    component mac_ip_encode_compute_ip_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataIn_TVALID : IN STD_LOGIC;
        checksumFifo_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_V_V_full_n : IN STD_LOGIC;
        checksumFifo_V_V_write : OUT STD_LOGIC;
        dataStreamBuffer0_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer0_V_full_n : IN STD_LOGIC;
        dataStreamBuffer0_V_write : OUT STD_LOGIC;
        dataIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        dataIn_TREADY : OUT STD_LOGIC;
        dataIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        dataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mac_ip_encode_ip_checksum_insert IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer0_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer0_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer0_V_read : OUT STD_LOGIC;
        checksumFifo_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_V_V_empty_n : IN STD_LOGIC;
        checksumFifo_V_V_read : OUT STD_LOGIC;
        dataStreamBuffer1_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer1_V_full_n : IN STD_LOGIC;
        dataStreamBuffer1_V_write : OUT STD_LOGIC );
    end component;


    component mac_ip_encode_extract_ip_address IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer1_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer1_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer1_V_read : OUT STD_LOGIC;
        dataStreamBuffer2_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer2_V_full_n : IN STD_LOGIC;
        dataStreamBuffer2_V_write : OUT STD_LOGIC;
        arpTableOut_V_V_TREADY : IN STD_LOGIC;
        arpTableOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpTableOut_V_V_TVALID : OUT STD_LOGIC;
        regSubNetMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mac_ip_encode_handle_arp_reply IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer2_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer2_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer2_V_read : OUT STD_LOGIC;
        arpTableIn_V_TVALID : IN STD_LOGIC;
        dataOut_TREADY : IN STD_LOGIC;
        arpTableIn_V_TDATA : IN STD_LOGIC_VECTOR (55 downto 0);
        arpTableIn_V_TREADY : OUT STD_LOGIC;
        dataOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        dataOut_TVALID : OUT STD_LOGIC;
        dataOut_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        dataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component FIFO_mac_ip_encode_checksumFifo_V_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_mac_ip_encode_dataStreamBuffer0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_mac_ip_encode_dataStreamBuffer1_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_mac_ip_encode_dataStreamBuffer2_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    mac_ip_encode_compute_ip_checksum_U0 : component mac_ip_encode_compute_ip_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_compute_ip_checksum_U0_ap_start,
        ap_done => mac_ip_encode_compute_ip_checksum_U0_ap_done,
        ap_continue => mac_ip_encode_compute_ip_checksum_U0_ap_continue,
        ap_idle => mac_ip_encode_compute_ip_checksum_U0_ap_idle,
        ap_ready => mac_ip_encode_compute_ip_checksum_U0_ap_ready,
        dataIn_TVALID => mac_ip_encode_compute_ip_checksum_U0_dataIn_TVALID,
        checksumFifo_V_V_din => mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_din,
        checksumFifo_V_V_full_n => mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_full_n,
        checksumFifo_V_V_write => mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_write,
        dataStreamBuffer0_V_din => mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_din,
        dataStreamBuffer0_V_full_n => mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_full_n,
        dataStreamBuffer0_V_write => mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_write,
        dataIn_TDATA => mac_ip_encode_compute_ip_checksum_U0_dataIn_TDATA,
        dataIn_TREADY => mac_ip_encode_compute_ip_checksum_U0_dataIn_TREADY,
        dataIn_TKEEP => mac_ip_encode_compute_ip_checksum_U0_dataIn_TKEEP,
        dataIn_TLAST => mac_ip_encode_compute_ip_checksum_U0_dataIn_TLAST);

    mac_ip_encode_ip_checksum_insert_U0 : component mac_ip_encode_ip_checksum_insert
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_ip_checksum_insert_U0_ap_start,
        ap_done => mac_ip_encode_ip_checksum_insert_U0_ap_done,
        ap_continue => mac_ip_encode_ip_checksum_insert_U0_ap_continue,
        ap_idle => mac_ip_encode_ip_checksum_insert_U0_ap_idle,
        ap_ready => mac_ip_encode_ip_checksum_insert_U0_ap_ready,
        dataStreamBuffer0_V_dout => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_dout,
        dataStreamBuffer0_V_empty_n => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_empty_n,
        dataStreamBuffer0_V_read => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_read,
        checksumFifo_V_V_dout => mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_dout,
        checksumFifo_V_V_empty_n => mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_empty_n,
        checksumFifo_V_V_read => mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_read,
        dataStreamBuffer1_V_din => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_din,
        dataStreamBuffer1_V_full_n => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_full_n,
        dataStreamBuffer1_V_write => mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_write);

    mac_ip_encode_extract_ip_address_U0 : component mac_ip_encode_extract_ip_address
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_extract_ip_address_U0_ap_start,
        ap_done => mac_ip_encode_extract_ip_address_U0_ap_done,
        ap_continue => mac_ip_encode_extract_ip_address_U0_ap_continue,
        ap_idle => mac_ip_encode_extract_ip_address_U0_ap_idle,
        ap_ready => mac_ip_encode_extract_ip_address_U0_ap_ready,
        dataStreamBuffer1_V_dout => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_dout,
        dataStreamBuffer1_V_empty_n => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_empty_n,
        dataStreamBuffer1_V_read => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_read,
        dataStreamBuffer2_V_din => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_din,
        dataStreamBuffer2_V_full_n => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_full_n,
        dataStreamBuffer2_V_write => mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_write,
        arpTableOut_V_V_TREADY => mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TREADY,
        arpTableOut_V_V_TDATA => mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TDATA,
        arpTableOut_V_V_TVALID => mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TVALID,
        regSubNetMask_V => mac_ip_encode_extract_ip_address_U0_regSubNetMask_V,
        regDefaultGateway_V => mac_ip_encode_extract_ip_address_U0_regDefaultGateway_V);

    mac_ip_encode_handle_arp_reply_U0 : component mac_ip_encode_handle_arp_reply
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mac_ip_encode_handle_arp_reply_U0_ap_start,
        ap_done => mac_ip_encode_handle_arp_reply_U0_ap_done,
        ap_continue => mac_ip_encode_handle_arp_reply_U0_ap_continue,
        ap_idle => mac_ip_encode_handle_arp_reply_U0_ap_idle,
        ap_ready => mac_ip_encode_handle_arp_reply_U0_ap_ready,
        dataStreamBuffer2_V_dout => mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_dout,
        dataStreamBuffer2_V_empty_n => mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_empty_n,
        dataStreamBuffer2_V_read => mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_read,
        arpTableIn_V_TVALID => mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TVALID,
        dataOut_TREADY => mac_ip_encode_handle_arp_reply_U0_dataOut_TREADY,
        arpTableIn_V_TDATA => mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TDATA,
        arpTableIn_V_TREADY => mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TREADY,
        dataOut_TDATA => mac_ip_encode_handle_arp_reply_U0_dataOut_TDATA,
        dataOut_TVALID => mac_ip_encode_handle_arp_reply_U0_dataOut_TVALID,
        dataOut_TKEEP => mac_ip_encode_handle_arp_reply_U0_dataOut_TKEEP,
        dataOut_TLAST => mac_ip_encode_handle_arp_reply_U0_dataOut_TLAST,
        myMacAddress_V => mac_ip_encode_handle_arp_reply_U0_myMacAddress_V);

    checksumFifo_V_V_U : component FIFO_mac_ip_encode_checksumFifo_V_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => checksumFifo_V_V_U_ap_dummy_ce,
        if_write_ce => checksumFifo_V_V_U_ap_dummy_ce,
        if_din => checksumFifo_V_V_din,
        if_full_n => checksumFifo_V_V_full_n,
        if_write => checksumFifo_V_V_write,
        if_dout => checksumFifo_V_V_dout,
        if_empty_n => checksumFifo_V_V_empty_n,
        if_read => checksumFifo_V_V_read);

    dataStreamBuffer0_V_U : component FIFO_mac_ip_encode_dataStreamBuffer0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => dataStreamBuffer0_V_U_ap_dummy_ce,
        if_write_ce => dataStreamBuffer0_V_U_ap_dummy_ce,
        if_din => dataStreamBuffer0_V_din,
        if_full_n => dataStreamBuffer0_V_full_n,
        if_write => dataStreamBuffer0_V_write,
        if_dout => dataStreamBuffer0_V_dout,
        if_empty_n => dataStreamBuffer0_V_empty_n,
        if_read => dataStreamBuffer0_V_read);

    dataStreamBuffer1_V_U : component FIFO_mac_ip_encode_dataStreamBuffer1_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => dataStreamBuffer1_V_U_ap_dummy_ce,
        if_write_ce => dataStreamBuffer1_V_U_ap_dummy_ce,
        if_din => dataStreamBuffer1_V_din,
        if_full_n => dataStreamBuffer1_V_full_n,
        if_write => dataStreamBuffer1_V_write,
        if_dout => dataStreamBuffer1_V_dout,
        if_empty_n => dataStreamBuffer1_V_empty_n,
        if_read => dataStreamBuffer1_V_read);

    dataStreamBuffer2_V_U : component FIFO_mac_ip_encode_dataStreamBuffer2_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => dataStreamBuffer2_V_U_ap_dummy_ce,
        if_write_ce => dataStreamBuffer2_V_U_ap_dummy_ce,
        if_din => dataStreamBuffer2_V_din,
        if_full_n => dataStreamBuffer2_V_full_n,
        if_write => dataStreamBuffer2_V_write,
        if_dout => dataStreamBuffer2_V_dout,
        if_empty_n => dataStreamBuffer2_V_empty_n,
        if_read => dataStreamBuffer2_V_read);





    -- ap_reg_procdone_mac_ip_encode_extract_ip_address_U0 assign process. --
    ap_reg_procdone_mac_ip_encode_extract_ip_address_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_mac_ip_encode_extract_ip_address_U0 <= ap_const_logic_0;
            else
            end if;
        end if;
    end process;


    -- ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0 assign process. --
    ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0 <= ap_const_logic_0;
            else
            end if;
        end if;
    end process;


    -- mac_ip_encode_ip_checksum_insert_U0_ap_start assign process. --
    mac_ip_encode_ip_checksum_insert_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mac_ip_encode_ip_checksum_insert_U0_ap_start <= ap_const_logic_0;
            else
                mac_ip_encode_ip_checksum_insert_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_0;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(ap_reg_procdone_mac_ip_encode_extract_ip_address_U0, ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0)
    begin
        if (((ap_const_logic_1 = ap_reg_procdone_mac_ip_encode_extract_ip_address_U0) and (ap_const_logic_1 = ap_reg_procdone_mac_ip_encode_handle_arp_reply_U0))) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    arpTableIn_V_TREADY <= mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TREADY;
    arpTableOut_V_V_TDATA <= mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TDATA;
    arpTableOut_V_V_TVALID <= mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TVALID;
    checksumFifo_V_V_U_ap_dummy_ce <= ap_const_logic_1;
    checksumFifo_V_V_din <= mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_din;
    checksumFifo_V_V_read <= mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_read;
    checksumFifo_V_V_write <= mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_write;
    dataIn_TREADY <= mac_ip_encode_compute_ip_checksum_U0_dataIn_TREADY;
    dataOut_TDATA <= mac_ip_encode_handle_arp_reply_U0_dataOut_TDATA;
    dataOut_TKEEP <= mac_ip_encode_handle_arp_reply_U0_dataOut_TKEEP;
    dataOut_TLAST <= mac_ip_encode_handle_arp_reply_U0_dataOut_TLAST;
    dataOut_TVALID <= mac_ip_encode_handle_arp_reply_U0_dataOut_TVALID;
    dataStreamBuffer0_V_U_ap_dummy_ce <= ap_const_logic_1;
    dataStreamBuffer0_V_din <= mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_din;
    dataStreamBuffer0_V_read <= mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_read;
    dataStreamBuffer0_V_write <= mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_write;
    dataStreamBuffer1_V_U_ap_dummy_ce <= ap_const_logic_1;
    dataStreamBuffer1_V_din <= mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_din;
    dataStreamBuffer1_V_read <= mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_read;
    dataStreamBuffer1_V_write <= mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_write;
    dataStreamBuffer2_V_U_ap_dummy_ce <= ap_const_logic_1;
    dataStreamBuffer2_V_din <= mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_din;
    dataStreamBuffer2_V_read <= mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_read;
    dataStreamBuffer2_V_write <= mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_write;
    mac_ip_encode_compute_ip_checksum_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_compute_ip_checksum_U0_ap_start <= ap_const_logic_1;
    mac_ip_encode_compute_ip_checksum_U0_checksumFifo_V_V_full_n <= checksumFifo_V_V_full_n;
    mac_ip_encode_compute_ip_checksum_U0_dataIn_TDATA <= dataIn_TDATA;
    mac_ip_encode_compute_ip_checksum_U0_dataIn_TKEEP <= dataIn_TKEEP;
    mac_ip_encode_compute_ip_checksum_U0_dataIn_TLAST <= dataIn_TLAST;
    mac_ip_encode_compute_ip_checksum_U0_dataIn_TVALID <= dataIn_TVALID;
    mac_ip_encode_compute_ip_checksum_U0_dataStreamBuffer0_V_full_n <= dataStreamBuffer0_V_full_n;
    mac_ip_encode_extract_ip_address_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_extract_ip_address_U0_ap_start <= ap_const_logic_1;
    mac_ip_encode_extract_ip_address_U0_arpTableOut_V_V_TREADY <= arpTableOut_V_V_TREADY;
    mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_dout <= dataStreamBuffer1_V_dout;
    mac_ip_encode_extract_ip_address_U0_dataStreamBuffer1_V_empty_n <= dataStreamBuffer1_V_empty_n;
    mac_ip_encode_extract_ip_address_U0_dataStreamBuffer2_V_full_n <= dataStreamBuffer2_V_full_n;
    mac_ip_encode_extract_ip_address_U0_regDefaultGateway_V <= regDefaultGateway_V;
    mac_ip_encode_extract_ip_address_U0_regSubNetMask_V <= regSubNetMask_V;
    mac_ip_encode_handle_arp_reply_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_handle_arp_reply_U0_ap_start <= ap_const_logic_1;
    mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TDATA <= arpTableIn_V_TDATA;
    mac_ip_encode_handle_arp_reply_U0_arpTableIn_V_TVALID <= arpTableIn_V_TVALID;
    mac_ip_encode_handle_arp_reply_U0_dataOut_TREADY <= dataOut_TREADY;
    mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_dout <= dataStreamBuffer2_V_dout;
    mac_ip_encode_handle_arp_reply_U0_dataStreamBuffer2_V_empty_n <= dataStreamBuffer2_V_empty_n;
    mac_ip_encode_handle_arp_reply_U0_myMacAddress_V <= myMacAddress_V;
    mac_ip_encode_ip_checksum_insert_U0_ap_continue <= ap_const_logic_1;
    mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_dout <= checksumFifo_V_V_dout;
    mac_ip_encode_ip_checksum_insert_U0_checksumFifo_V_V_empty_n <= checksumFifo_V_V_empty_n;
    mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_dout <= dataStreamBuffer0_V_dout;
    mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer0_V_empty_n <= dataStreamBuffer0_V_empty_n;
    mac_ip_encode_ip_checksum_insert_U0_dataStreamBuffer1_V_full_n <= dataStreamBuffer1_V_full_n;
end behav;
