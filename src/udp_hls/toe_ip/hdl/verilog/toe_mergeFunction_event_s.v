// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toe_mergeFunction_event_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in2_V_dout,
        in2_V_empty_n,
        in2_V_read,
        in1_V_dout,
        in1_V_empty_n,
        in1_V_read,
        out_V_din,
        out_V_full_n,
        out_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm0_0 = 1'b1;
parameter    ap_ST_st2_fsm1_1 = 2'b10;
parameter    ap_ST_st0_fsm1_0 = 2'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [53:0] in2_V_dout;
input   in2_V_empty_n;
output   in2_V_read;
input  [53:0] in1_V_dout;
input   in1_V_empty_n;
output   in1_V_read;
output  [53:0] out_V_din;
input   out_V_full_n;
output   out_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in2_V_read;
reg in1_V_read;
reg[53:0] out_V_din;
reg out_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm0 = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm0_0;
reg    ap_sig_bdd_23;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm1 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm1_0;
reg    ap_sig_bdd_34;
wire   [0:0] tmp65_nbreadreq_fu_84_p3;
wire   [0:0] tmp_nbreadreq_fu_92_p3;
reg    ap_sig_bdd_63;
reg   [0:0] tmp65_reg_120;
reg   [0:0] tmp_reg_124;
reg    ap_sig_bdd_81;
reg    ap_sig_cseq_ST_st2_fsm1_1;
reg    ap_sig_bdd_87;
reg   [53:0] tmp_2_reg_128;
reg   [53:0] tmp1_reg_133;
reg   [0:0] ap_NS_fsm0;
reg   [1:0] ap_NS_fsm1;
reg    ap_sig_bdd_77;
reg    ap_sig_bdd_113;




/// the current state (ap_CS_fsm0) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm0
    if (ap_rst == 1'b1) begin
        ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
    end else begin
        ap_CS_fsm0 <= ap_NS_fsm0;
    end
end

/// the current state (ap_CS_fsm1) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm1
    if (ap_rst == 1'b1) begin
        ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
    end else begin
        ap_CS_fsm1 <= ap_NS_fsm1;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        tmp1_reg_133 <= in1_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        tmp65_reg_120 <= tmp65_nbreadreq_fu_84_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_92_p3) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        tmp_2_reg_128 <= in2_V_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        tmp_reg_124 <= tmp_nbreadreq_fu_92_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_cseq_ST_st0_fsm1_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm1_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm1_0 assign process. ///
always @ (ap_sig_bdd_34)
begin
    if (ap_sig_bdd_34) begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm0_0 assign process. ///
always @ (ap_sig_bdd_23)
begin
    if (ap_sig_bdd_23) begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm1_1 assign process. ///
always @ (ap_sig_bdd_87)
begin
    if (ap_sig_bdd_87) begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    end
end

/// in1_V_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or tmp65_nbreadreq_fu_84_p3 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        in1_V_read = ap_const_logic_1;
    end else begin
        in1_V_read = ap_const_logic_0;
    end
end

/// in2_V_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or tmp65_nbreadreq_fu_84_p3 or tmp_nbreadreq_fu_92_p3 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_92_p3) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
        in2_V_read = ap_const_logic_1;
    end else begin
        in2_V_read = ap_const_logic_0;
    end
end

/// out_V_din assign process. ///
always @ (tmp65_reg_120 or tmp_2_reg_128 or tmp1_reg_133 or ap_sig_bdd_77 or ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        if (~(ap_const_lv1_0 == tmp65_reg_120)) begin
            out_V_din = tmp1_reg_133;
        end else if (ap_sig_bdd_77) begin
            out_V_din = tmp_2_reg_128;
        end else begin
            out_V_din = 'bx;
        end
    end else begin
        out_V_din = 'bx;
    end
end

/// out_V_write assign process. ///
always @ (ap_done_reg or tmp65_reg_120 or tmp_reg_124 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    if ((((ap_const_lv1_0 == tmp65_reg_120) & ~(ap_const_lv1_0 == tmp_reg_124) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81)) | (~(ap_const_lv1_0 == tmp65_reg_120) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81)))) begin
        out_V_write = ap_const_logic_1;
    end else begin
        out_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm0) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm0 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    case (ap_CS_fsm0)
        ap_ST_st1_fsm0_0 : 
        begin
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
        end
        default : 
        begin
            ap_NS_fsm0 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm1) of the state machine. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_CS_fsm1 or ap_sig_bdd_63 or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    case (ap_CS_fsm1)
        ap_ST_st2_fsm1_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81) & ~ap_sig_bdd_63)) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81) & (~(ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ap_sig_bdd_63)))) begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end else begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end
        end
        ap_ST_st0_fsm1_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_81 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end
        end
        default : 
        begin
            ap_NS_fsm1 = 'bx;
        end
    endcase
end


/// ap_sig_bdd_113 assign process. ///
always @ (ap_done_reg or ap_sig_bdd_81 or ap_sig_cseq_ST_st2_fsm1_1)
begin
    ap_sig_bdd_113 = ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_81));
end

/// ap_sig_bdd_23 assign process. ///
always @ (ap_CS_fsm0)
begin
    ap_sig_bdd_23 = (ap_CS_fsm0[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_34 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_34 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_0]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (ap_start or ap_done_reg or in2_V_empty_n or tmp65_nbreadreq_fu_84_p3 or tmp_nbreadreq_fu_92_p3 or in1_V_empty_n)
begin
    ap_sig_bdd_63 = (((in2_V_empty_n == ap_const_logic_0) & (tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_92_p3)) | ((in1_V_empty_n == ap_const_logic_0) & ~(tmp65_nbreadreq_fu_84_p3 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_77 assign process. ///
always @ (tmp65_reg_120 or tmp_reg_124)
begin
    ap_sig_bdd_77 = ((ap_const_lv1_0 == tmp65_reg_120) & ~(ap_const_lv1_0 == tmp_reg_124));
end

/// ap_sig_bdd_81 assign process. ///
always @ (out_V_full_n or tmp65_reg_120 or tmp_reg_124)
begin
    ap_sig_bdd_81 = (((out_V_full_n == ap_const_logic_0) & (ap_const_lv1_0 == tmp65_reg_120) & ~(ap_const_lv1_0 == tmp_reg_124)) | ((out_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp65_reg_120)));
end

/// ap_sig_bdd_87 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_87 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_1]);
end
assign tmp65_nbreadreq_fu_84_p3 = in1_V_empty_n;
assign tmp_nbreadreq_fu_92_p3 = in2_V_empty_n;


endmodule //toe_mergeFunction_event_s

