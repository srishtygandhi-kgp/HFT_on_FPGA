// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toe_mergeFunction_ap_uint_16_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        closeTimer2stateTable_releaseS_dout,
        closeTimer2stateTable_releaseS_empty_n,
        closeTimer2stateTable_releaseS_read,
        rtTimer2stateTable_releaseStat_dout,
        rtTimer2stateTable_releaseStat_empty_n,
        rtTimer2stateTable_releaseStat_read,
        timer2stateTable_releaseState_s_din,
        timer2stateTable_releaseState_s_full_n,
        timer2stateTable_releaseState_s_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm0_0 = 1'b1;
parameter    ap_ST_st2_fsm1_1 = 2'b10;
parameter    ap_ST_st3_fsm2_1 = 2'b10;
parameter    ap_ST_st0_fsm1_0 = 2'b1;
parameter    ap_ST_st0_fsm2_0 = 2'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] closeTimer2stateTable_releaseS_dout;
input   closeTimer2stateTable_releaseS_empty_n;
output   closeTimer2stateTable_releaseS_read;
input  [15:0] rtTimer2stateTable_releaseStat_dout;
input   rtTimer2stateTable_releaseStat_empty_n;
output   rtTimer2stateTable_releaseStat_read;
output  [15:0] timer2stateTable_releaseState_s_din;
input   timer2stateTable_releaseState_s_full_n;
output   timer2stateTable_releaseState_s_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg closeTimer2stateTable_releaseS_read;
reg rtTimer2stateTable_releaseStat_read;
reg[15:0] timer2stateTable_releaseState_s_din;
reg timer2stateTable_releaseState_s_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm0 = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm0_0;
reg    ap_sig_bdd_26;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm1 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm1_0;
reg    ap_sig_bdd_37;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm2 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm2_0;
reg    ap_sig_bdd_45;
wire   [0:0] tmp_nbreadreq_fu_36_p3;
reg    ap_sig_bdd_63;
reg   [0:0] tmp_reg_72;
wire   [0:0] tmp_1_nbreadreq_fu_50_p3;
reg    ap_sig_bdd_77;
reg    ap_sig_cseq_ST_st2_fsm1_1;
reg    ap_sig_bdd_83;
reg   [0:0] ap_reg_ppstg_tmp_reg_72_pp0_it1;
reg   [0:0] tmp_1_reg_81;
reg    ap_sig_bdd_102;
reg    ap_sig_cseq_ST_st3_fsm2_1;
reg    ap_sig_bdd_107;
reg   [15:0] tmp_V_reg_76;
reg   [15:0] ap_reg_ppstg_tmp_V_reg_76_pp0_it1;
reg   [15:0] tmp_V_1_reg_85;
reg   [0:0] ap_NS_fsm0;
reg   [1:0] ap_NS_fsm1;
reg   [1:0] ap_NS_fsm2;
reg    ap_sig_bdd_98;
reg    ap_sig_bdd_139;




/// the current state (ap_CS_fsm0) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm0
    if (ap_rst == 1'b1) begin
        ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
    end else begin
        ap_CS_fsm0 <= ap_NS_fsm0;
    end
end

/// the current state (ap_CS_fsm1) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm1
    if (ap_rst == 1'b1) begin
        ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
    end else begin
        ap_CS_fsm1 <= ap_NS_fsm1;
    end
end

/// the current state (ap_CS_fsm2) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm2
    if (ap_rst == 1'b1) begin
        ap_CS_fsm2 <= ap_ST_st0_fsm2_0;
    end else begin
        ap_CS_fsm2 <= ap_NS_fsm2;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_reg_ppstg_tmp_V_reg_76_pp0_it1 <= tmp_V_reg_76;
        ap_reg_ppstg_tmp_reg_72_pp0_it1 <= tmp_reg_72;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_lv1_0 == tmp_reg_72) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_1_reg_81 <= tmp_1_nbreadreq_fu_50_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_lv1_0 == tmp_reg_72) & ~(ap_const_lv1_0 == tmp_1_nbreadreq_fu_50_p3) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_V_1_reg_85 <= rtTimer2stateTable_releaseStat_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_36_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_V_reg_76 <= closeTimer2stateTable_releaseS_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_reg_72 <= tmp_nbreadreq_fu_36_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_cseq_ST_st0_fsm1_0 or ap_sig_cseq_ST_st0_fsm2_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm2_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_bdd_63 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm1_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm2_0 assign process. ///
always @ (ap_sig_bdd_45)
begin
    if (ap_sig_bdd_45) begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm0_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm1_1 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm2_1 assign process. ///
always @ (ap_sig_bdd_107)
begin
    if (ap_sig_bdd_107) begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_0;
    end
end

/// closeTimer2stateTable_releaseS_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or tmp_nbreadreq_fu_36_p3 or ap_sig_bdd_63 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_36_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        closeTimer2stateTable_releaseS_read = ap_const_logic_1;
    end else begin
        closeTimer2stateTable_releaseS_read = ap_const_logic_0;
    end
end

/// rtTimer2stateTable_releaseStat_read assign process. ///
always @ (ap_done_reg or tmp_reg_72 or tmp_1_nbreadreq_fu_50_p3 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_lv1_0 == tmp_reg_72) & ~(ap_const_lv1_0 == tmp_1_nbreadreq_fu_50_p3) & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        rtTimer2stateTable_releaseStat_read = ap_const_logic_1;
    end else begin
        rtTimer2stateTable_releaseStat_read = ap_const_logic_0;
    end
end

/// timer2stateTable_releaseState_s_din assign process. ///
always @ (ap_reg_ppstg_tmp_reg_72_pp0_it1 or ap_reg_ppstg_tmp_V_reg_76_pp0_it1 or tmp_V_1_reg_85 or ap_sig_bdd_98 or ap_sig_bdd_139)
begin
    if (ap_sig_bdd_139) begin
        if (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1)) begin
            timer2stateTable_releaseState_s_din = ap_reg_ppstg_tmp_V_reg_76_pp0_it1;
        end else if (ap_sig_bdd_98) begin
            timer2stateTable_releaseState_s_din = tmp_V_1_reg_85;
        end else begin
            timer2stateTable_releaseState_s_din = 'bx;
        end
    end else begin
        timer2stateTable_releaseState_s_din = 'bx;
    end
end

/// timer2stateTable_releaseState_s_write assign process. ///
always @ (ap_done_reg or ap_reg_ppstg_tmp_reg_72_pp0_it1 or tmp_1_reg_81 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if ((((ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1) & ~(ap_const_lv1_0 == tmp_1_reg_81) & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102)) | (~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102)))) begin
        timer2stateTable_releaseState_s_write = ap_const_logic_1;
    end else begin
        timer2stateTable_releaseState_s_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm2) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm2 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm2)
        ap_ST_st3_fsm2_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102) & ~ap_sig_bdd_77)) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102) & ((ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | ~(ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)))) begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end else begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end
        end
        ap_ST_st0_fsm2_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end
        end
        default : 
        begin
            ap_NS_fsm2 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm1) of the state machine. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_CS_fsm1 or ap_sig_bdd_63 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm1)
        ap_ST_st2_fsm1_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~ap_sig_bdd_63)) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_77 | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & (~(ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ap_sig_bdd_63)))) begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end else begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end
        end
        ap_ST_st0_fsm1_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_63 | (ap_sig_bdd_77 & (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1)) | (ap_sig_bdd_102 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end
        end
        default : 
        begin
            ap_NS_fsm1 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm0) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm0 or ap_sig_bdd_63 or ap_sig_bdd_77 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm0)
        ap_ST_st1_fsm0_0 : 
        begin
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
        end
        default : 
        begin
            ap_NS_fsm0 = 'bx;
        end
    endcase
end


/// ap_sig_bdd_102 assign process. ///
always @ (timer2stateTable_releaseState_s_full_n or ap_reg_ppstg_tmp_reg_72_pp0_it1 or tmp_1_reg_81)
begin
    ap_sig_bdd_102 = (((timer2stateTable_releaseState_s_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1) & ~(ap_const_lv1_0 == tmp_1_reg_81)) | ((timer2stateTable_releaseState_s_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1)));
end

/// ap_sig_bdd_107 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_107 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_1]);
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_done_reg or ap_sig_bdd_102 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    ap_sig_bdd_139 = ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_102));
end

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm0)
begin
    ap_sig_bdd_26 = (ap_CS_fsm0[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_37 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_0]);
end

/// ap_sig_bdd_45 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_45 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_0]);
end

/// ap_sig_bdd_63 assign process. ///
always @ (ap_start or ap_done_reg or closeTimer2stateTable_releaseS_empty_n or tmp_nbreadreq_fu_36_p3)
begin
    ap_sig_bdd_63 = (((closeTimer2stateTable_releaseS_empty_n == ap_const_logic_0) & ~(tmp_nbreadreq_fu_36_p3 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_77 assign process. ///
always @ (rtTimer2stateTable_releaseStat_empty_n or tmp_reg_72 or tmp_1_nbreadreq_fu_50_p3)
begin
    ap_sig_bdd_77 = ((rtTimer2stateTable_releaseStat_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == tmp_reg_72) & ~(ap_const_lv1_0 == tmp_1_nbreadreq_fu_50_p3));
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_1]);
end

/// ap_sig_bdd_98 assign process. ///
always @ (ap_reg_ppstg_tmp_reg_72_pp0_it1 or tmp_1_reg_81)
begin
    ap_sig_bdd_98 = ((ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_72_pp0_it1) & ~(ap_const_lv1_0 == tmp_1_reg_81));
end
assign tmp_1_nbreadreq_fu_50_p3 = rtTimer2stateTable_releaseStat_empty_n;
assign tmp_nbreadreq_fu_36_p3 = closeTimer2stateTable_releaseS_empty_n;


endmodule //toe_mergeFunction_ap_uint_16_s

