// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="udpPortReq,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.892000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=7}" *)

module udpPortReq (
        ap_clk,
        ap_rst,
        txRequestPort_V_V_din,
        txRequestPort_V_V_full_n,
        txRequestPort_V_V_write,
        rxReplyPort_V_dout,
        rxReplyPort_V_empty_n,
        rxReplyPort_V_read
);

parameter    ap_ST_fsm_state1 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv16_281 = 16'b1010000001;

input   ap_clk;
input   ap_rst;
output  [15:0] txRequestPort_V_V_din;
input   txRequestPort_V_V_full_n;
output   txRequestPort_V_V_write;
input   rxReplyPort_V_dout;
input   rxReplyPort_V_empty_n;
output   rxReplyPort_V_read;

reg txRequestPort_V_V_write;
reg rxReplyPort_V_read;

reg   [0:0] waiting;
reg   [0:0] recvReply;
reg    txRequestPort_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] brmerge_demorgan_fu_112_p2;
wire   [0:0] tmp_3_read_fu_102_p2;
wire   [0:0] brmerge1_fu_124_p2;
reg    rxReplyPort_V_blk_n;
reg    ap_condition_56;
wire   [0:0] brmerge_demorgan_fu_112_p1;
wire   [0:0] tmp_1_not_fu_118_p0;
wire   [0:0] tmp_1_not_fu_118_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 waiting = 1'b0;
#0 recvReply = 1'b0;
#0 ap_CS_fsm = 1'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_56 == 1'b1))) begin
        if (~(1'b0 == brmerge_demorgan_fu_112_p2)) begin
            waiting <= 1'b0;
        end else if (((1'b0 == brmerge_demorgan_fu_112_p2) & (1'b0 == brmerge1_fu_124_p2))) begin
            waiting <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == brmerge_demorgan_fu_112_p2) & ~(ap_condition_56 == 1'b1))) begin
        recvReply <= rxReplyPort_V_dout;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == brmerge_demorgan_fu_112_p2))) begin
        rxReplyPort_V_blk_n = rxReplyPort_V_empty_n;
    end else begin
        rxReplyPort_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == brmerge_demorgan_fu_112_p2) & ~(ap_condition_56 == 1'b1))) begin
        rxReplyPort_V_read = 1'b1;
    end else begin
        rxReplyPort_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == brmerge_demorgan_fu_112_p2) & ~(1'b0 == tmp_3_read_fu_102_p2)) | ((ap_CS_fsm_state1 == 1'b1) & (1'b0 == brmerge_demorgan_fu_112_p2) & (1'b0 == brmerge1_fu_124_p2) & (1'b0 == recvReply)))) begin
        txRequestPort_V_V_blk_n = txRequestPort_V_V_full_n;
    end else begin
        txRequestPort_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & (1'b0 == brmerge_demorgan_fu_112_p2) & (1'b0 == brmerge1_fu_124_p2) & (1'b0 == recvReply) & ~(ap_condition_56 == 1'b1)) | ((ap_CS_fsm_state1 == 1'b1) & ~(1'b0 == brmerge_demorgan_fu_112_p2) & ~(1'b0 == tmp_3_read_fu_102_p2) & ~(ap_condition_56 == 1'b1)))) begin
        txRequestPort_V_V_write = 1'b1;
    end else begin
        txRequestPort_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

always @ (*) begin
    ap_condition_56 = (((1'b0 == brmerge_demorgan_fu_112_p2) & (1'b0 == brmerge1_fu_124_p2) & (1'b0 == recvReply) & (txRequestPort_V_V_full_n == 1'b0)) | (~(1'b0 == brmerge_demorgan_fu_112_p2) & (rxReplyPort_V_empty_n == 1'b0)) | (~(1'b0 == brmerge_demorgan_fu_112_p2) & ~(1'b0 == tmp_3_read_fu_102_p2) & (txRequestPort_V_V_full_n == 1'b0)));
end

assign brmerge1_fu_124_p2 = (waiting | tmp_1_not_fu_118_p2);

assign brmerge_demorgan_fu_112_p1 = rxReplyPort_V_empty_n;

assign brmerge_demorgan_fu_112_p2 = (waiting & brmerge_demorgan_fu_112_p1);

assign tmp_1_not_fu_118_p0 = txRequestPort_V_V_full_n;

assign tmp_1_not_fu_118_p2 = (tmp_1_not_fu_118_p0 ^ 1'b1);

assign tmp_3_read_fu_102_p2 = rxReplyPort_V_dout;

assign txRequestPort_V_V_din = ap_const_lv16_281;

endmodule //udpPortReq
